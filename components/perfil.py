import streamlit as st
from pyswip import Prolog
from datetime import datetime, timedelta

def init_prolog():
    prolog = Prolog()
    prolog.consult("prolog/ciclos.pl")
    prolog.consult("prolog/perfil.pl")
    return prolog

def decode_text(text):
    if isinstance(text, bytes):
        return text.decode('utf-8')
    return text

def show_perfil_page():
    st.title("üå∑Perfil")
    
    prolog = init_prolog()
    
    with st.form("perfil_form"):
        nome = st.text_input("Nome", value=st.session_state.get('nome', ''))
        col1, col2 = st.columns(2)
        
        with col1:
            ano_nascimento = st.number_input("Ano de Nascimento", 
                                           min_value=1950, 
                                           max_value=2010, 
                                           value=st.session_state.get('ano_nascimento', 1990))
            peso = st.number_input("Peso (kg)", 
                                 min_value=30.0, 
                                 max_value=200.0, 
                                 step=0.1,
                                 value=st.session_state.get('peso', 60.0))
            altura = st.number_input("Altura (cm)", 
                                   min_value=100, 
                                   max_value=250,
                                   value=st.session_state.get('altura', 160))
        
        with col2:
            regularidade = st.selectbox(
                "Seu ciclo √© regular?",
                ["regular", "irregular"],
                index=["regular", "irregular"].index(st.session_state.get('regularidade', "regular"))
            )
            
            metodos = {
                "nenhum": "nenhum",
                "pilula_adesivo_anel": "p√≠lula, adesivo ou anel",
                "pilula_progesterona": "p√≠lula s√≥ de progesterona",
                "implante_injecao": "implante ou inje√ß√£o",
                "sistema_intrauterino": "sistema intrauterino",
                "diu_sem_hormonio": "DIU sem horm√¥nio",
                "preservativo": "preservativo"
            }
            
            metodo = st.selectbox(
                "M√©todo Contraceptivo",
                list(metodos.keys()),
                format_func=lambda x: metodos[x],
                index=list(metodos.keys()).index(st.session_state.get('metodo', "nenhum"))
            )
            
            problemas_dict = {
                "sop": "s√≠ndrome dos ov√°rios polic√≠sticos (SOP)",
                "endometriose": "endometriose",
                "miomas": "miomas",
                "nenhum": "nenhuma/n√£o tenho certeza"
            }
            
            problemas = st.selectbox(
                "Condi√ß√µes de Sa√∫de",
                list(problemas_dict.keys()),
                format_func=lambda x: problemas_dict[x],
                index=list(problemas_dict.keys()).index(st.session_state.get('problemas', "nenhum"))
            )
        
        st.subheader("Informa√ß√µes do √öltimo Ciclo")
        col3, col4 = st.columns(2)
        
        with col3:
            data_ultimo_ciclo = st.date_input("Primeiro dia do √∫ltimo ciclo", 
                                            value=st.session_state.get('ultimo_ciclo', datetime.now().date()))
            
            duracao_ciclo = st.number_input("Dura√ß√£o do ciclo (dias)", 
                                          min_value=21, 
                                          max_value=45, 
                                          value=st.session_state.get('duracao_ciclo', 28),
                                          help="Tempo entre o primeiro dia de uma menstrua√ß√£o at√© o dia anterior da pr√≥xima")
            nao_sei_duracao = st.checkbox("N√£o sei a dura√ß√£o do ciclo", 
                                        value=st.session_state.get('nao_sei_duracao', False))
            if nao_sei_duracao:
                duracao_ciclo = 28  
        
        with col4:
            duracao_menstruacao = st.number_input("Dura√ß√£o da menstrua√ß√£o (dias)", 
                                                min_value=1, 
                                                max_value=10, 
                                                value=st.session_state.get('duracao_menstruacao', 5))
            
            sintomas = st.multiselect(
                "Sintomas frequentes",
                ["C√≥licas", "TPM", "Dor nos seios", "Mudan√ßas no muco cervical",
                 "Altera√ß√µes de humor", "Dor abdominal", "Incha√ßo"],
                default=st.session_state.get('sintomas_perfil', [])
            )
            
            intensidade = st.slider("Intensidade m√©dia dos sintomas", 
                                  1, 5, 
                                  value=st.session_state.get('intensidade_perfil', 3))
        
        submitted = st.form_submit_button("Salvar")
        
        if submitted and nome:

            query = f"cadastrar_usuario('{nome.lower()}', {ano_nascimento}, {peso}, {altura}, '{regularidade}', '{metodo}', '{problemas}')"
            list(prolog.query(query))
            

            ciclo_query = f"assertz(historico_menstrual('{nome.lower()}', date({data_ultimo_ciclo.year},{data_ultimo_ciclo.month},{data_ultimo_ciclo.day}), {duracao_ciclo}, {duracao_menstruacao}))"
            list(prolog.query(ciclo_query))
            

            st.session_state.nome = nome
            st.session_state.ultimo_ciclo = data_ultimo_ciclo
            st.session_state.duracao_ciclo = duracao_ciclo
            st.session_state.duracao_menstruacao = duracao_menstruacao
            st.session_state.sintomas_perfil = sintomas
            st.session_state.intensidade_perfil = intensidade
            st.session_state.nao_sei_duracao = nao_sei_duracao  # Armazenar a informa√ß√£o de n√£o saber dura√ß√£o
            

            st.session_state.ano_nascimento = ano_nascimento
            st.session_state.peso = peso
            st.session_state.altura = altura
            st.session_state.regularidade = regularidade
            st.session_state.metodo = metodo
            st.session_state.problemas = problemas
            
            st.success("Perfil salvo com sucesso!")


            st.subheader("Informa√ß√µes Importantes")


            st.markdown("""
            <div class="alerta-importante">
                <p>‚ö†Ô∏è M√©todos contraceptivos hormonais e ciclos irregulares podem afetar a precis√£o das previs√µes.</p>
                <p>Para previs√µes mais precisas, √© recomendado usar o aplicativo durante per√≠odos sem uso de contraceptivos hormonais.</p>
            </div>
            """, unsafe_allow_html=True)
            

            if problemas != "nenhum":
                query_saude = f"alerta_saude('{problemas}', Alerta)"
                for resultado in prolog.query(query_saude):
                    st.warning(decode_text(resultado["Alerta"]))
            

            st.subheader("Recomenda√ß√µes Personalizadas")
            query_rec = f"gerar_recomendacoes('{nome.lower()}', Recomendacoes)"
            for resultado in prolog.query(query_rec):
                for rec in resultado["Recomendacoes"]:
                    st.write("‚Ä¢ " + decode_text(rec))

if __name__ == "__main__":
    show_perfil_page()
